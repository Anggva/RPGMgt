<!DOCTYPE html>
<html>
	<head>
		<link rel='stylesheet' type='text/css' href='style.css'>
		<link rel='stylesheet' type='text/css' href='build/perfect-scrollbar.css'>
		<script src="http://code.jquery.com/jquery-1.11.0.min.js"></script>
		<script src="http://code.jquery.com/ui/1.11.0/jquery-ui.min.js"></script>
		<script src="build/perfect-scrollbar.js"></script>
		<script src='build/JSXTransformer.js'></script>		
		<script src='build/react.js'></script>
		<script type='text/jsx'>

function MapNode(mapName,imageSrc,mapInfo) {
	this.mapName = mapName,
	this.imageSrc = imageSrc,
	this.mapInfo = mapInfo,
	this.childMaps = [],
	this.addChild = function(newChild) {
		// prompt for new map info, including prompting for location
		childMaps.push(newChild);
	}
};

var MapImage = React.createClass({
	getInitialState: function() {
		return {
			zoomFactor : 1.0
		}
	},
	getDefaultProps: function() {
		return {
		}
	},
	componentWillMount: function() {

	},
	componentDidMount: function() {
		//var mapImageElement = document.getElementById('mapImage');
		//mapImageElement.addEventListener('dblclick', resetImage);
		var wDif = $('#mapImageContainer').width() - $('#mapImage').width();
		var hDif = $('#mapImageContainer').height() - $('#mapImage').height();
		if(wDif > 0 || hDif > 0) {
			if(hDif > wDif) {
				$('#mapImage').css('height','100%');
			} else {
				$('#mapImage').css('width','100%');
			}
		}
		Ps.initialize(document.getElementById('mapImageContainer'), {
			//See https://github.com/noraesae/perfect-scrollbar for info on how to use this.
		});
		var curDown, curYPos, curXPos;
		$('#mapImageContainer').mousemove(function(e){
			if(curDown === true){
				console.log('Scrolling');
				$('#mapImageContainer').scrollTop(
					$('#mapImageContainer').scrollTop() + (curYPos - e.pageY)
				); 
				$('#mapImageContainer').scrollLeft(
					$('#mapImageContainer').scrollLeft() + (curXPos - e.pageX)
				);
			}
		});
		$('#mapImageContainer').mousedown(function(e){
			if(e.which == 2) {
				curDown = true;
				curYPos = e.pageY;
				curXPos = e.pageX;
			}
		});
		$('#mapImageContainer').mouseup(function(){
			curDown = false;
		});
	},
	render: function() {
		return(
			<img id='mapImage' src={this.props.mapNode.imageSrc}>
				{this.props.mapNode.childMaps.map(function(childMap){
					return <div className='mapLoc' onclick='gotoLoc(childMap)' style={childMap.loc} />;
				})}
			</img>
		);
	}
});


var Sidebar = React.createClass({
    getInitialState: function() {
    return {showForm: false}
    {showEdit: false}
    {showNPC: false}
    {showLoc: false};
 	 },
 	 onClick: function() {
        this.setState({ showForm: true });
    },
  onLocClick: function() {
        this.setState({ showLoc: true });
    },
    onNPCClick: function() {
        this.setState({ showNPC: true });
    },
    onEditClick: function() {
        this.setState({ showEdit: true });
    },
	render: function() {

		return(
			
            <div className="container" id="sidebar">
            { this.state.showForm ?  <FormPage />:null }
            { this.state.showEdit ? <EditPage /> : null }
            <div id="title"><div id="t">
					<h1>{this.props.mapNode.mapName}</h1>
				</div></div>
				<div id="mapInfo">
					<p>{this.props.mapNode.mapInfo}</p>
				</div>
            <div id="locationButton">
					<button type="button" onClick={this.onLocClick}>Location</button>
				</div>
					{ this.state.showLoc ? <ShowLocList /> : null }
				<div id="NPCButton">
					<button type="button" onClick={this.onNPCClick}>NPC</button>
				</div>
				{ this.state.showNPC ? <ShowNPCList /> : null }
				<div id="options">
				</div>
            <div id="bottomBar">
					<button onClick={this.onClick}>+</button>
					<button onClick={this.onEditClick}>Edit</button>
				</div>
				</div>
		);
		
	},
});

var LocationList = React.createClass({
  render: function() {
    var createItem = function(itemText, index) {
      return <li key={index + itemText}>{itemText}</li>;
    };
    return <ul>{this.props.items.map(createItem)}</ul>;
  }
});

var ShowLocList = React.createClass({
	getInitialState: function() {
    return {items: ['Loc1','Loc2','Loc3']}
  },
  render: function() {
    return (
            
            <LocationList items={this.state.items} />
            
      );
  }
});

var ShowNPCList = React.createClass({
	getInitialState: function() {
    return {items: ['NPC1','NPC2','NPC3']}
  },
  render: function() {
    return (
            
            <LocationList items={this.state.items} />
            
      );
  }
});

var FormPage = React.createClass({
    render: function() {
        return (
        	<div>
            <form>
            <div><input type="text" placeholder="Map Name" /></div>
        <div><input type="text" placeholder="Description" /></div>
        <div><input type="text" placeholder="NPC (Separate by comma)" /></div>
        <div><input type="submit" value="Create" /></div>
      </form>
      <div id="bottomBar">
      <button>Back</button>
      </div>
      </div>
        );
    }
});

var EditPage = React.createClass({
    render: function() {
        return (
        	<div>
            <form>
            <div><input type="text" placeholder="Map Name" /></div>
        <div><input type="text" placeholder="Description" /></div>
        <div><input type="text" placeholder="NPC (Separate by comma)" /></div>
        <div><input type="submit" value="Confirm Edit" /></div>
      </form>
      <div id="bottomBar">
      <button>Back</button>
      </div>
      </div>
        );
    }
});

var World = React.createClass({
	getInitialState: function() {
		return {
			editingEnabled: false,
			currentlyAddingMap: false,
			rootMap: new MapNode('test map','testImage.jpg',
				'Problems: Cant overwrite the elements. I can separate the form page from the detail page, but this.props doesnt work in another class, so I didnt do it. I think I know how to make it work in another class, but I think overwriting the element is better. I dont know how to overwrite it though.')
		}
	},
	componentDidLoad: function() {
		this.setState({
			rootMap: $.getJSON("mapData.json")
		})
	},
	changeLoc: function(loc) {
		this.props.currentMap = loc;
	},
	render: function() {
		this.props.currentMap = this.props.currentMap || this.state.rootMap;
		return(
			<div className='container'>
				<div className='container' id='mapImageContainer'>
					<MapImage mapNode={this.props.currentMap} parent={this} />
				</div>
				<div className='container' id='sidebarContainer'>
					<Sidebar mapNode={this.props.currentMap} parent={this} />
				</div>
			</div>
		);
	}
});

React.render(<World />, document.body);

		</script>
	</head>
	<body ondragstart='return false;' ondrop='return false;' />
</html>
